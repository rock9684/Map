#include <vector>
#include <ctime>
#include <cmath>
#include <sys/time.h>
#include <algorithm>
#include "m3.h"
#include "m4.h"
#include <signal.h>
#include <unistd.h>
#include "StreetsDatabaseAPI.h"
#include "algorithm"
#include <vector>
#include <string>
#include "m1.h"
#include <queue>
#include <map>
#include <unordered_map>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <climits>
typedef void (*sighandler_t)(int);
using namespace std;

//To terminate the function
bool termination = 0;
//Stored the cost between any pair of points 
double cost[200][200];
//Follow the sequence of all pick-up points, all drop-off points and all depots
vector<unsigned> input;




//To find the solution as good as possible of the post-man problem within 30 seconds
//The algorithm used here is simulated annealing

std::vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries, const std::vector<unsigned>& depots) {
    signal(SIGALRM, terminate_and_return);
    alarm(27);
    unsigned N = deliveries.size();
    unsigned M = depots.size();
    unsigned number_of_points = N * 2 + M;
    //Temperature
    double T = 400;
    
    for (unsigned i = 0; i < number_of_points; i++) {
        if (i < N)
            input.push_back(deliveries[i].pickUp);
        else if (i < 2 * N)
            input.push_back(deliveries[i - N].dropOff);
        else
            input.push_back(depots[i - 2 * N]);
    }

    //Call cost_function here to initialize 2-dimensional array cost
    //total_cost();
    /*for(int i = 0; i < number_of_points; i ++){
        for(int j = 0; j < number_of_points; j ++){
            cout << cost[i][j] << " ";
        }
        cout << endl;
    }*/
    
    vector<unsigned> optimal_found_so_far;
    vector<unsigned> solution;
    
    //Initialize first solution
    solution = basicGreedy(N, M);
    //If no solution
    if(solution.size() == 0){
        vector<unsigned> noSolution;
        termination = 0;
        input.clear();
        return noSolution;
    }
    optimal_found_so_far = solution;
    vector<unsigned> neighbor; 
    double difference = 0;
    while(!termination && T > 0.001){
        double oldCost;
        double newCost;

        
        if(difference < 0){
            optimal_found_so_far = neighbor;
        }
        
        neighbor = newPath(solution, N, M, newCost, oldCost);

        //Compute the possibility

        T = T * 0.99;
        double possibility = p_func(oldCost, newCost, T);
        
        //Check if the neighbor should be accepted
        srand(time(NULL));
        if(possibility > (double)rand()/RAND_MAX){
            difference += (newCost - oldCost);
            solution = neighbor;
        }
    }
    
    //Retrieve the path in terms of segments
    vector<unsigned> finalPath;
    clock_t a = clock();
    for(auto iter = optimal_found_so_far.begin();iter != optimal_found_so_far.end() - 1;iter++){
        vector<unsigned> path = find_path_between_intersections(*iter, *(iter + 1));
        finalPath.insert(finalPath.end(), path.begin(), path.end());       
    }
    a = clock() - a;
    cout << (double)a/CLOCKS_PER_SEC << "A*" << endl;
    termination = 0;
    input.clear();
    return finalPath;
}

//Probability function
//T stands for temperature, which should be related to time already consumed
//The math expression used is p = e^((old_cost - new_cost)/T)

double p_func(double old_cost, double new_cost, double T) {
    double temp = (old_cost - new_cost) / T;
    double P;
    //Taylor series of e^temp
    P = 1 + temp / 1 + temp * temp / 2 + temp * temp * temp / 6 + temp * temp * temp * temp / 24 + temp * temp * temp * temp * temp / 120 +
            temp * temp * temp * temp * temp * temp / 720;
    return P;
}

void total_cost() {
    for (unsigned i = 0; i < input.size(); i++) {
        unsigned intersection = input[i];
        vector<unsigned> temp = input;

        //Dijkstra starts here
        priority_queue<pair<double, unsigned>, vector<pair<double, unsigned>>, greater<pair<double, unsigned>>> path;
        unordered_map<unsigned, node> openSet; //Nodes visited but not expanded
        unordered_map<unsigned, node> closedSet; //Nodes already expanded

        //Initialize all structures
        node start(intersection, 0);
        start.travelTime = 0;
        openSet.emplace(intersection, start);
        path.emplace(start.travelTime, intersection);

        //When open set is not empty
        while (!openSet.empty()) {
            //If already expanded, skip
            if (closedSet.find(path.top().second) != closedSet.end()) {
                path.pop();
                continue;
            }
            //Store useful data

            unsigned intersectID = path.top().second;
            node current = openSet.find(intersectID)->second;
            //Update all structures
            path.pop();
            openSet.erase(intersectID);
            closedSet.emplace(intersectID, current);

            //If found
            if (find(temp.begin(), temp.end(), intersectID) != temp.end()) {
                int j = distance(input.begin(), find(input.begin(), input.end(), intersectID));
                cost[i][j] = current.travelTime;
                temp.erase(find(temp.begin(), temp.end(), intersectID));
                while(find(temp.begin(), temp.end(), intersectID) != temp.end())
                    temp.erase(find(temp.begin(), temp.end(), intersectID));
            }
            //Expansion
            for (unsigned i = 0; i < getIntersectionStreetSegmentCount(intersectID); i++) {
                StreetSegmentInfo info = getStreetSegmentInfo(getIntersectionStreetSegment(intersectID, i));
                unsigned tempSegment = getIntersectionStreetSegment(intersectID, i);
                //Chick path legality
                if (intersectID == info.from) {
                    unsigned next = info.to;
                    node temp(intersectID, tempSegment);
                    temp.travelTime += current.travelTime;
                    if (getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                        temp.travelTime += 0.25;
                    //If the target is already expanded or current time is not less than time stored in the target, skip
                    if (closedSet.find(next) != closedSet.end())
                        continue;
                    else if (openSet.find(next) != openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                        continue;
                    //The best till now, store
                    openSet.erase(next);
                    openSet.emplace(next, temp);
                    path.emplace(temp.travelTime, next);
                } else if (!info.oneWay) {
                    unsigned next = info.from;
                    node temp(intersectID, tempSegment);
                    temp.travelTime += current.travelTime;
                    if (getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                        temp.travelTime += 0.25;
                    if (closedSet.find(next) != closedSet.end())
                        continue;
                    else if (openSet.find(next) != openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                        continue;
                    openSet.erase(next);
                    openSet.emplace(next, temp);
                    path.emplace(temp.travelTime, next);
                }
            }
            //Check if finished
            if(temp.size() == 0)
                break;
        }
        
        //If some point(s) not found, assign -1 to corresponding position
        if (temp.size() != 0) {
            for (unsigned j = 0; j < temp.size(); j++) {
                int k = distance(input.begin(), find(input.begin(), input.end(), temp[j]));
                cost[i][k] = -1;
            }
        }


    }
}


//To set the flag when alarm signal is sent

void terminate_and_return(int dum) {
    termination = 1;
}

//To find cost of a sequence of intersection ids
double find_cost(vector<unsigned> _input) {
    double _cost = 0;
    for (unsigned i = 0; i < _input.size() - 1; i++) {
        int position1 = distance(input.begin(), find(input.begin(), input.end(), _input[i]));
        int position2 = distance(input.begin(), find(input.begin(), input.end(), _input[i + 1]));
        //If the path is illegal
        if (cost[position1][position2] < 0)
            return -1;
        //Accumulate the cost
        _cost += cost[position1][position2];
    }
    return _cost;
}

//To test if a typical solution exists
vector<unsigned> noSolution(unsigned N, unsigned M){
    vector<unsigned> initialOne;
    
    for(unsigned i = 0; i < N; i ++){
        unsigned j = i + N;
        if(new_find_cost(input[i], input[j]) < 0)
            //If a pick-up cannot reach corresponding drop-off
            return initialOne;
    }
    
    for(unsigned i = 2*N; i < 2*N + M; i++){
        if(new_find_cost(input[i], input[0]) > 0){
            //Find one connection between a depot to the first delivery point (assume all delivery points are connected)
            initialOne.push_back(input[i]);
            break;
        }
    }
    //If no connection from any depot to any delivery point
    if(initialOne.size() == 0)
        return initialOne;
    
    
    for(unsigned i = 2*N; i < 2*N + M; i++){
        if(new_find_cost(input[0], input[i]) > 0){
            //Find one connection between the first delivery point to a depot (assume all delivery points are connected)
            initialOne.push_back(input[i]);
            break;
        }
    }
    //If no connection from any delivery point to any depot
    if(initialOne.size() == 1)
        return initialOne;
    //Initialize the solution following the sequence
    //depot, all pick-ups, all drop-offs, depot
    for(auto iter = input.begin(), iter2 = input.begin() + N - 1; iter2 < input.begin() + 2*N; iter2 ++, iter ++){
        initialOne.insert(initialOne.end() - 1, *iter);
        initialOne.insert(initialOne.end() - 1, *iter2);
    }
    return initialOne;
}

//To generate a new solution from a legal solution
vector<unsigned> newPath(vector<unsigned> oldPath, unsigned N, unsigned M, double &new_cost, double &old_cost){
    unsigned size = oldPath.size();
    int position1;
    int position2;
        srand(time(NULL));
        position1 = rand()%(size - 3) + 1;
        position2 = position1 + 1;
        bool ok = 1;
        for(unsigned i = 0; i < N; i ++){
            if(input[i] == oldPath[position1] && input[i + N] == oldPath[position2]){
                ok = 0;
            }
        }
        old_cost = new_find_cost(oldPath[0], oldPath[1]) + new_find_cost(oldPath[position1 -1], oldPath[position1]) + new_find_cost(oldPath[position1], oldPath[position2]) + 
                new_find_cost(oldPath[position2], oldPath[position2 + 1]) + new_find_cost(oldPath[size - 2], oldPath[size - 1]);
        //Swap the two element
        if(ok){
        unsigned temp = oldPath[position1];
        oldPath[position1] = oldPath[position2];
        oldPath[position2] = temp;
        }
    
    //To ensure there is a connection between the first depot to the first delivery point and the last delivery point to second depot
        srand(time(NULL));
        int newDepot1 = rand()%M;
        srand(time(NULL));
        int newDepot2 = rand()%M;
        if(new_find_cost(input[2*N + newDepot1], oldPath[1]) > 0 && new_find_cost(oldPath[size - 2], input[2*N + newDepot2]) > 0){
            oldPath[0] = input[2*N + newDepot1];
            oldPath[size - 1] = input[2*N + newDepot2];
        }
    new_cost = new_find_cost(oldPath[0], oldPath[1]) + new_find_cost(oldPath[position1 -1], oldPath[position1]) + new_find_cost(oldPath[position1], oldPath[position2]) + 
                new_find_cost(oldPath[position2], oldPath[position2 + 1]) + new_find_cost(oldPath[size - 2], oldPath[size - 1]);
    
    return oldPath;
}

double new_find_cost(unsigned intersect_id_start, unsigned intersect_id_end){
    priority_queue<pair<double, unsigned>, vector<pair<double, unsigned>>, greater<pair<double, unsigned>>> path;
    unordered_map<unsigned, node> openSet; //Nodes visited but not expanded
    unordered_map<unsigned, node> closedSet; //Nodes already expanded
    
    //Initialize all structures
    node start(intersect_id_start, 0, intersect_id_start, intersect_id_end);
    start.travelTime = 0;
    openSet.emplace(intersect_id_start, start);
    path.emplace(start.travelTime+start.projectedTime, intersect_id_start);
    
    //When open set is not empty
    while(!openSet.empty()){
        //If already expanded, skip
        if(closedSet.find(path.top().second) != closedSet.end()){
            path.pop();
            continue;
        }
        //Store useful data
        
        unsigned intersectID = path.top().second;
        node current = openSet.find(intersectID)->second;
        //Update all structures
        path.pop();
        openSet.erase(intersectID);
        closedSet.emplace(intersectID, current);
        
        //If found
        if(intersectID == intersect_id_end){
            return current.travelTime;
        }
        //Expansion
        for(unsigned i = 0; i < getIntersectionStreetSegmentCount(intersectID); i++){
            StreetSegmentInfo info = getStreetSegmentInfo(getIntersectionStreetSegment(intersectID, i));
            unsigned tempSegment = getIntersectionStreetSegment(intersectID, i);
            //Chick path legality
            if(intersectID == info.from){
                unsigned next = info.to;
                node temp(intersectID, tempSegment, next, intersect_id_end);
                temp.travelTime += current.travelTime;
                if(getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                    temp.travelTime += 0.25;
                //If the target is already expanded or current time is not less than time stored in the target, skip
                if(closedSet.find(next) != closedSet.end())
                    continue;
                else if(openSet.find(next)!=openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                    continue;
                //The best till now, store
                openSet.erase(next);
                openSet.emplace(next, temp);
                path.emplace(temp.travelTime + temp.projectedTime, next);
            }else if(!info.oneWay){
                unsigned next = info.from;
                node temp(intersectID, tempSegment, next, intersect_id_end);
                temp.travelTime += current.travelTime;
                if(getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                    temp.travelTime += 0.25;
                if(closedSet.find(next) != closedSet.end())
                    continue;
                else if(openSet.find(next)!=openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                    continue;
                openSet.erase(next);
                openSet.emplace(next, temp);
                path.emplace(temp.travelTime + temp.projectedTime, next);
            }
        }
    }
    return -1;
}

//To find the first solution
vector<unsigned> basicGreedy(unsigned N, unsigned M){
    vector<unsigned> initialOne;
    vector<unsigned> pickUp;
    vector<unsigned> dropOff;
    vector<unsigned> depot;
    pickUp.insert(pickUp.begin(), input.begin(), input.begin() + N);
    dropOff.insert(dropOff.begin(), input.begin() + N, input.begin() + 2*N);
    depot.insert(depot.begin(), input.begin() + 2*N, input.end());
    
    //Find the nearest one form any depot to any pick-up
    int finalTo;
    unsigned finalFrom;
    double travelTime;
    for(unsigned i = 0; i < M; i ++){
        if(i == 0){
            finalTo = find_nearest_point(depot[i], pickUp, travelTime);
            finalFrom = depot[i];
        }
        else{
            if(finalTo == -1){
                finalTo = find_nearest_point(depot[i], pickUp, travelTime);
                finalFrom = depot[i];
            }
            double newTravelTime;
            int newFinalTo;
            newFinalTo = find_nearest_point(depot[i], pickUp, newTravelTime);
            if(newTravelTime < travelTime){
                travelTime = newTravelTime;
                finalTo = newFinalTo;
                finalFrom = depot[i];
            }
        }
    }
    vector<unsigned> failure;
    if(finalTo == -1){
        return failure;
    }
    
    initialOne.push_back(finalFrom);
    initialOne.push_back(finalTo);
    
    //Process everything between the start point and the return point
    while(find(pickUp.begin(), pickUp.end(), finalTo) != pickUp.end()){
        pickUp.erase(find(pickUp.begin(), pickUp.end(), finalTo));
    }
    //Reconstruct pickUp
    pickUp.insert(pickUp.begin(), (unsigned)finalTo);
    unsigned fakeN = N;
    vector<unsigned> fakeInput = input;
    unsigned result = Dijkstra(pickUp[0], pickUp, dropOff, N, M, fakeN, fakeInput);
    if(!result == -1){
        return failure;
    }
    initialOne.push_back(result);
    while(!pickUp.empty() || !dropOff.empty()){
        result = Dijkstra(result, pickUp, dropOff, N, M, fakeN, fakeInput);
        if(!result == -1){
            return failure;
        }
        initialOne.push_back(result);
    }
    
    
    double dum;
    int finalDepot;
    finalDepot = find_nearest_point (initialOne[initialOne.size() - 1], depot, dum);
    if(finalDepot == -1){
        return failure;
    }
    initialOne.push_back(finalDepot);
    return initialOne;
}



unsigned Dijkstra(unsigned inter, vector<unsigned> &pickUp, vector<unsigned> &dropOff, unsigned N, unsigned M, unsigned &fakeN, vector<unsigned> &fakeInput) {
        unsigned intersection = inter;

        //Dijkstra starts here
        priority_queue<pair<double, unsigned>, vector<pair<double, unsigned>>, greater<pair<double, unsigned>>> path;
        unordered_map<unsigned, node> openSet; //Nodes visited but not expanded
        unordered_map<unsigned, node> closedSet; //Nodes already expanded

        //Initialize all structures
        node start(intersection, 0);
        start.travelTime = 0;
        openSet.emplace(intersection, start);
        path.emplace(start.travelTime, intersection);

        //When open set is not empty
        while (!openSet.empty()) {
            //If already expanded, skip
            if (closedSet.find(path.top().second) != closedSet.end()) {
                path.pop();
                continue;
            }
            //Store useful data

            unsigned intersectID = path.top().second;
            node current = openSet.find(intersectID)->second;
            //Update all structures
            path.pop();

            //If found in pickUP
            if (find(pickUp.begin(), pickUp.end(), intersectID) != pickUp.end()) {
                pickUp.erase(find(pickUp.begin(), pickUp.end(), intersectID));
                while(find(pickUp.begin(), pickUp.end(), intersectID) != pickUp.end())
                    pickUp.erase(find(pickUp.begin(), pickUp.end(), intersectID));
                return intersectID;
            }
            //If found in dropOff
            else if(find(dropOff.begin(), dropOff.end(), intersectID) != dropOff.end()){
                unsigned size = dropOff.size();
                for(unsigned i = 0; i < fakeN; i ++){
                    if(fakeInput[i + fakeN] == intersectID){
                        unsigned corresPickup = fakeInput[i];
                        //If picked up
                        if(find(pickUp.begin(), pickUp.end(), corresPickup) == pickUp.end()){
                            fakeInput[i] = -1;
                            fakeInput[i + fakeN] = -1;
                            dropOff.erase(find(dropOff.begin(), dropOff.end(), intersectID));
                        }
                    }
                }
                if(dropOff.size() != size)
                    return intersectID;
            }
            openSet.erase(intersectID);
            closedSet.emplace(intersectID, current);
            //Expansion
            for (unsigned i = 0; i < getIntersectionStreetSegmentCount(intersectID); i++) {
                StreetSegmentInfo info = getStreetSegmentInfo(getIntersectionStreetSegment(intersectID, i));
                unsigned tempSegment = getIntersectionStreetSegment(intersectID, i);
                //Chick path legality
                if (intersectID == info.from) {
                    unsigned next = info.to;
                    node temp(intersectID, tempSegment);
                    temp.travelTime += current.travelTime;
                    if (getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                        temp.travelTime += 0.25;
                    //If the target is already expanded or current time is not less than time stored in the target, skip
                    if (closedSet.find(next) != closedSet.end())
                        continue;
                    else if (openSet.find(next) != openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                        continue;
                    //The best till now, store
                    openSet.erase(next);
                    openSet.emplace(next, temp);
                    path.emplace(temp.travelTime, next);
                } else if (!info.oneWay) {
                    unsigned next = info.from;
                    node temp(intersectID, tempSegment);
                    temp.travelTime += current.travelTime;
                    if (getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                        temp.travelTime += 0.25;
                    if (closedSet.find(next) != closedSet.end())
                        continue;
                    else if (openSet.find(next) != openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                        continue;
                    openSet.erase(next);
                    openSet.emplace(next, temp);
                    path.emplace(temp.travelTime, next);
                }
            }
            //Check if finished
            if(pickUp.empty() && dropOff.empty())
                break;
        }
        
        //If some point(s) not found, assign -1 to corresponding position
        if (!pickUp.empty() || !dropOff.empty()) {
            return -1;
        }

}


// Returns the shortest travel time path (vector of street segments) from 
// the start intersection to a point of interest with the specified name.
// If no such path exists, returns an empty (size == 0) vector.
// Dijkstra algorithm
int find_nearest_point (unsigned intersect_id_start, vector<unsigned> targets, double time){
    //Dijkstra starts here
    priority_queue<pair<double, unsigned>, vector<pair<double, unsigned>>, greater<pair<double, unsigned>>> path;
    unordered_map<unsigned, node> openSet; //Nodes visited but not expanded
    unordered_map<unsigned, node> closedSet; //Nodes already expanded
    
    //Initialize all structures
    node start(intersect_id_start, 0);
    start.travelTime = 0;
    openSet.emplace(intersect_id_start, start);
    path.emplace(start.travelTime, intersect_id_start);
    
    //When open set is not empty
    while(!openSet.empty()){
        //If already expanded, skip
        if(closedSet.find(path.top().second) != closedSet.end()){
            path.pop();
            continue;
        }
        //Store useful data
        
        unsigned intersectID = path.top().second;
        node current = openSet.find(intersectID)->second;
        //Update all structures
        path.pop();
        openSet.erase(intersectID);
        closedSet.emplace(intersectID, current);
        
        //If found
        if(find(targets.begin(), targets.end(), intersectID) != targets.end()){
            time = current.travelTime;
            return intersectID;
        }
        //Expansion
        for(unsigned i = 0; i < getIntersectionStreetSegmentCount(intersectID); i++){
            StreetSegmentInfo info = getStreetSegmentInfo(getIntersectionStreetSegment(intersectID, i));
            unsigned tempSegment = getIntersectionStreetSegment(intersectID, i);
            //Chick path legality
            if(intersectID == info.from){
                unsigned next = info.to;
                node temp(intersectID, tempSegment);
                temp.travelTime += current.travelTime;
                if(getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                    temp.travelTime += 0.25;
                //If the target is already expanded or current time is not less than time stored in the target, skip
                if(closedSet.find(next) != closedSet.end())
                    continue;
                else if(openSet.find(next)!=openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                    continue;
                //The best till now, store
                openSet.erase(next);
                openSet.emplace(next, temp);
                path.emplace(temp.travelTime, next);
            }else if(!info.oneWay){
                unsigned next = info.from;
                node temp(intersectID, tempSegment);
                temp.travelTime += current.travelTime;
                if(getStreetSegmentInfo(current.fromSegment).streetID != getStreetSegmentInfo(temp.fromSegment).streetID)
                    temp.travelTime += 0.25;
                if(closedSet.find(next) != closedSet.end())
                    continue;
                else if(openSet.find(next)!=openSet.end() && openSet.find(next)->second.travelTime < temp.travelTime)
                    continue;
                openSet.erase(next);
                openSet.emplace(next, temp);
                path.emplace(temp.travelTime, next);
            }
        }
    }

    //If failure
    return -1;
}